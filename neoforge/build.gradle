plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "com.matthewprenger.cursegradle" version "1.4.0"
    id "com.modrinth.minotaur" version "2.+"
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

architectury {
    platformSetupLoomIde()
    neoForge()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

repositories {
    maven {
        name = 'NeoForged'
        url = 'https://maven.neoforged.net/releases'
    }
}

dependencies {
    neoForge "net.neoforged:neoforge:${project.neoforge_version}"
    modApi "dev.architectury:architectury-neoforge:${project.architectury_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionNeoForge')

    modImplementation "curse.maven:yaml-config-1128669:${project.config_library_file_neoforge}"

    modRuntimeOnly "curse.maven:ui-933200:${project.ui_library_file_neoforge}"
}

processResources {
    inputs.property "version", project.version
    inputs.property "mod_id", project.mod_id
    inputs.property "mod_name", project.mod_name
    inputs.property "mod_description", project.mod_description
    inputs.property "mod_author", project.mod_author
    inputs.property "mod_license", project.mod_license
    inputs.property "mod_repository", project.mod_repository

    inputs.property "neoforge_loader_version", project.neoforge_loader_version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "architectury_version", project.architectury_version
    inputs.property "config_library_version", project.config_library_version

    filesMatching("META-INF/neoforge.mods.toml") {
        expand([
                "version": project.version,
                "mod_id": project.mod_id,
                "mod_name": project.mod_name,
                "mod_description": project.mod_description,
                "mod_author": project.mod_author,
                "mod_license": project.mod_license,
                "mod_repository": project.mod_repository,

                "neoforge_loader_version": project.neoforge_loader_version,
                "minecraft_version": project.minecraft_version,
                "architectury_version": project.architectury_version,
                "config_library_version": project.config_library_version
        ])
    }

    filesMatching("pack.mcmeta") {
        expand "mod_name": project.mod_name
    }
}

shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowBundle]
    archiveClassifier = "neoforge-dev-shadow"
}

remapJar {
    inputFile.set shadowJar.archiveFile
    archiveClassifier = "neoforge"
}

remapSourcesJar {
    archiveClassifier = "neoforge-sources"
}


curseforge {
    apiKey = System.getenv("CURSEFORGE_API_KEY")
    project {
        id = project.curse_forge_project_id
        releaseType = project.release_type
        changelogType = "markdown"
        changelog = rootProject.file('changelog.md')

        project.supported_minecraft_versions.split(',').each { version ->
            addGameVersion version
        }

        addGameVersion "Java 21"
        addGameVersion "Forge"

        relations {
            project.curseforge_dependencies.split(',').each { dep ->
                requiredDependency dep.trim()
            }
        }

        mainArtifact(remapJar) {
            displayName = "$project.mod_name Forge $project.minecraft_version - $project.mod_version"
        }

        addArtifact(remapSourcesJar) {
        }
    }
}

modrinth {
    token = System.getenv("MODRINTH_API_KEY")
    projectId = project.modrinth_project_id
    versionName = "$project.mod_name Forge $project.minecraft_version - $project.mod_version"
    versionNumber = "$project.mod_version"
    versionType = "$project.release_type"
    uploadFile = remapJar
    additionalFiles = [remapSourcesJar]
    gameVersions = project.supported_minecraft_versions.split(',').toList()
    loaders = ["forge"]
    changelog = rootProject.file('changelog.md').text
    dependencies {
        project.modrinth_dependencies.split(',').each { dep ->
            required.project dep
        }
    }
}